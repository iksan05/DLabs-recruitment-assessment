openapi: 3.0.0
info:
  title: User Management API
  description: API untuk manajemen pengguna dengan autentikasi JWT.
  version: "1.0.0"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        nama:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "johndoe@example.com"
        umur:
          type: integer
          example: 25
        status_anggota:
          type: boolean
          example: true

paths:
  /api/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nama:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                password:
                  type: string
                  minLength: 6
                  example: "password123"
                password_confirmation:
                  type: string
                  example: "password123"
                umur:
                  type: integer
                  example: 25
                status_anggota:
                  type: boolean
                  example: true
                role_id:
                  type: integer
                  example: 1
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: "jwt_token"
        '422':
          description: Validation error

  /api/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: "jwt_token"
        '401':
          description: Unauthorized

  /api/logout:
    post:
      summary: User logout
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Logout Berhasil!"
        '401':
          description: Unauthorized

  /api/users:
    get:
      summary: Get a paginated list of users
      tags:
        - User
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number for pagination (default is 1)
        - in: query
          name: per_page
          schema:
            type: integer
          description: Number of users per page (default is 10)
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'

  /api/users/{id}:
    get:
      summary: Get details of a specific user by ID
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      summary: Update a user's information
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nama:
                  type: string
                  maxLength: 255
                email:
                  type: string
                  format: email
                  maxLength: 255
                password:
                  type: string
                  minLength: 6
                umur:
                  type: integer
                  minimum: 1
                status_anggota:
                  type: boolean
                role_id:
                  type: integer
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated successfully"
                  user:
                    $ref: '#/components/schemas/User'
        '403':
          description: Unauthorized
        '404':
          description: User not found

    delete:
      summary: Delete a user by ID
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
        '403':
          description: Unauthorized
        '404':
          description: User not found
